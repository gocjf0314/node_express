"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _express = _interopRequireDefault(require("express"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _queryString = _interopRequireDefault(require("query-string"));
var _cors = _interopRequireDefault(require("cors"));
var _url = require("url");
var _request = _interopRequireDefault(require("request"));
var _process$env$CLIENT_I, _process$env$CLIENT_S;
// Load .env file
_dotenv.default.configDotenv();
const port = process.env.PORT;
const client_id = (_process$env$CLIENT_I = process.env.CLIENT_ID) !== null && _process$env$CLIENT_I !== void 0 ? _process$env$CLIENT_I : '';
const client_secret = (_process$env$CLIENT_S = process.env.CLIENT_SECRET) !== null && _process$env$CLIENT_S !== void 0 ? _process$env$CLIENT_S : '';
const redirect_uri = "http://localhost:3000/callback";
const _dirname = (0, _url.fileURLToPath)(new URL(".", import.meta.url));

// Create express server app
const app = (0, _express.default)();
app.set("view engine", "ejs");
app.set("views", "./views");
app.use(_bodyParser.default.urlencoded({
  extended: true
})).use(_express.default.static(_dirname + "/public")).use((0, _cors.default)());
function generateRandomString(randomLength) {
  const randomChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let generatedString = "";
  for (let index = 0; index < randomLength; index++) {
    generatedString += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
  }
  return generatedString;
}
function generateCodeChallenge(_x) {
  return _generateCodeChallenge.apply(this, arguments);
}
function _generateCodeChallenge() {
  _generateCodeChallenge = (0, _asyncToGenerator2.default)(function* (codeVerifier) {
    function base64encode(value) {
      return btoa(String.fromCharCode.apply(null, [...new Uint8Array(value)])).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
    }
    const encoder = new TextEncoder();
    const data = encoder.encode(codeVerifier);
    if (typeof window !== "undefined") {
      const digest = yield window.crypto.subtle.digest('SHA-256', data);
      return base64encode(digest);
    } else {
      return "";
    }
  });
  return _generateCodeChallenge.apply(this, arguments);
}
const codeVerifier = generateRandomString(128);
generateCodeChallenge(codeVerifier).then(codeChallenge => {
  let state = generateRandomString(16);
  let scope = 'user-read-private user-read-email';
  if (typeof localStorage !== "undefined") {
    localStorage.setItem('code_verifier', codeVerifier);
  }
  let args = new URLSearchParams({
    response_type: 'code',
    client_id: client_id,
    scope: scope,
    redirect_uri: redirect_uri,
    state: state,
    code_challenge_method: 'S256',
    code_challenge: codeChallenge
  }).toString();
  if (typeof window !== "undefined") {
    window.location.href = 'https://accounts.spotify.com/authorize?' + args;
    const urlParams = new URLSearchParams(window.location.search);
    let code = urlParams.get('code');
  }
});
function getProfile(_x2) {
  return _getProfile.apply(this, arguments);
}
function _getProfile() {
  _getProfile = (0, _asyncToGenerator2.default)(function* (accessToken) {
    var _localStorage$getItem;
    let access_token = (_localStorage$getItem = localStorage.getItem('access_token')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : "";
    const response = yield fetch('https://api.spotify.com/v1/me', {
      headers: {
        Authorization: 'Bearer ' + access_token
      }
    });
    const data = yield response.json();
    return data;
  });
  return _getProfile.apply(this, arguments);
}
app.get("/login", function (req, res) {
  var state = generateRandomString(16);
  var scope = "user-read-private user-read-email";

  // request authorization
  res.redirect("https://accounts.spotify.com/authorize?" + _queryString.default.stringify({
    response_type: "code",
    client_id: client_id,
    redirect_uri: redirect_uri,
    scope: scope,
    state: state
  }));
});
app.get("/callback", /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (req, res) {
    var code = req.query.code || null;
    var state = req.query.state || null;
    if (state === null) {
      res.redirect("/#" + _queryString.default.stringify({
        error: "state_mismatch"
      }));
    } else {
      var authOptions = {
        url: "https://accounts.spotify.com/api/token",
        form: {
          code: code,
          redirect_uri: redirect_uri,
          grant_type: "authorization_code"
        },
        headers: {
          Authorization: "Basic " + Buffer.from(client_id + ":" + client_secret).toString("base64")
        },
        json: true
      };
      _request.default.post(authOptions, function (error, response, body) {
        console.log(response.statusMessage);
        if (!error && response.statusCode === 200) {
          const access_token = body.access_token;
          const refresh_token = body.refresh_token;
          var options = {
            headers: {
              Authorization: "Bearer " + access_token
            },
            json: true
          };

          // use the access token to access the Spotify Web API
          _request.default.get("https://api.spotify.com/v1/me", options, function (error, response, body) {
            console.log(response.statusMessage);
            if (error || response.statusCode !== 200) {
              console.log(error);
            }
          });

          // we can also pass the token to the browser to make requests from there
          res.redirect("/#" + _queryString.default.stringify({
            access_token: access_token,
            refresh_token: refresh_token
          }));
        } else {
          res.redirect("/#" + _queryString.default.stringify({
            error: "invalid_token"
          }));
        }
      });
    }
  });
  return function (_x3, _x4) {
    return _ref.apply(this, arguments);
  };
}());
app.get("/refresh_token", /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (req, res) {
    var refresh_token = req.query.refresh_token;
    var authOptions = {
      headers: {
        Authorization: "Basic " + Buffer.from(client_id + ":" + client_secret).toString("base64")
      },
      form: {
        grant_type: "refresh_token",
        refresh_token: refresh_token
      },
      json: true
    };
    _request.default.post("https://accounts.spotify.com/api/token", authOptions, function (error, response) {
      console.log(`{statusCode:${response.statusCode}, statusMessage:${response.statusMessage}}`);
      if (!error && response.statusCode === 200) {
        console.log("Success get refresh token");
      } else {
        console.log(`Rerresh token Error: ${error}`);
      }
    });
  });
  return function (_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}());
app.listen(port, () => {
  console.log(`Server is running at port:${port}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,